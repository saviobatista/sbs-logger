name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

permissions:
  contents: read
  packages: write
  security-events: write

env:
  GO_VERSION: '1.24.5'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_PREFIX: ${{ github.repository }}

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [1.23.11, 1.24.5]

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go ${{ matrix.go-version }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}

      - name: Install dependencies
        run: go mod download

      - name: Install golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v2.3.0

      - name: Run linter
        run: golangci-lint run --timeout=5m

      - name: Run tests
        run: go test -v -race -coverprofile=coverage.out ./...

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.out
          flags: unittests
          name: codecov-umbrella

  build:
    name: Build Binaries
    runs-on: ubuntu-latest
    needs: test
    # Skip building all platforms for PRs, only build for main branch
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    strategy:
      matrix:
        include:
          - name: ingestor
            binary: ingestor
          - name: logger
            binary: logger
          - name: tracker
            binary: tracker

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Create bin directory
        run: mkdir -p bin

      - name: Build ${{ matrix.binary }}
        run: |
          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build \
            -ldflags="-w -s" \
            -o bin/${{ matrix.binary }}-linux-amd64 \
            ./cmd/${{ matrix.binary }}

      - name: Build for ARM64
        run: |
          CGO_ENABLED=0 GOOS=linux GOARCH=arm64 go build \
            -ldflags="-w -s" \
            -o bin/${{ matrix.binary }}-linux-arm64 \
            ./cmd/${{ matrix.binary }}

      - name: Build for macOS
        run: |
          CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build \
            -ldflags="-w -s" \
            -o bin/${{ matrix.binary }}-darwin-amd64 \
            ./cmd/${{ matrix.binary }}

      - name: List built binaries
        run: |
          echo "Built binaries for ${{ matrix.binary }}:"
          ls -la bin/${{ matrix.binary }}-*
          echo "Binary sizes:"
          du -h bin/${{ matrix.binary }}-*

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.binary }}-binaries
          path: bin/${{ matrix.binary }}-*
          retention-days: 1

  # Quick build for PRs - only build one binary to verify compilation
  pr-build:
    name: PR Build Check
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    strategy:
      matrix:
        include:
          - name: ingestor
            binary: ingestor

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Build ${{ matrix.binary }} (PR Check)
        run: |
          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build \
            -ldflags="-w -s" \
            -o bin/${{ matrix.binary }}-linux-amd64 \
            ./cmd/${{ matrix.binary }}

  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: test
    timeout-minutes: 5
    # Skip Docker builds for PRs, only build for main branch
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    strategy:
      matrix:
        include:
          - service: ingestor
            dockerfile: Dockerfile.ingestor
          - service: logger
            dockerfile: Dockerfile.logger
          - service: tracker
            dockerfile: Dockerfile.tracker

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_PREFIX }}/sbs-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix=sha-
            type=raw,value=latest,enable={{is_default_branch}}
          flavor: |
            latest=auto

      - name: Debug metadata
        run: |
          echo "Image names: ${{ steps.meta.outputs.tags }}"
          echo "Labels: ${{ steps.meta.outputs.labels }}"

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
          provenance: false

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: [test, docker-build]
    # Skip integration tests for PRs, only run for main branch
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    services:
      postgres:
        image: timescale/timescaledb:latest-pg14
        env:
          POSTGRES_USER: sbs
          POSTGRES_PASSWORD: sbs_password
          POSTGRES_DB: sbs_data
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

      nats:
        image: nats:latest
        ports:
          - 4222:4222

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Wait for services
        run: |
          echo "Waiting for PostgreSQL..."
          timeout 60 bash -c 'until pg_isready -h localhost -p 5432; do sleep 1; done'
          
          echo "Waiting for Redis..."
          timeout 60 bash -c 'until timeout 1 bash -c "</dev/tcp/127.0.0.1/6379" 2>/dev/null; do sleep 1; done'
          
          echo "Waiting for NATS..."
          timeout 60 bash -c 'until timeout 1 bash -c "</dev/tcp/127.0.0.1/4222" 2>/dev/null; do sleep 1; done'

      - name: Run integration tests
        run: |
          # Set environment variables for integration tests
          export DB_CONN_STR="postgres://sbs:sbs_password@localhost:5432/sbs_data?sslmode=disable"
          export REDIS_ADDR="localhost:6379"
          export NATS_URL="nats://localhost:4222"
          
          # Run integration tests (if they exist)
          go test -v -tags=integration ./... || echo "No integration tests found"

  bump_tag_version:
    name: Bump and tag version
    runs-on: ubuntu-latest
    needs: [test, build, docker-build, security]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    permissions:
      contents:      write
      id-token:      write
      issues:        read
      pull-requests: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Bump and tag version
        uses: jefflinse/pr-semver-bump@v1.7.3
        id: bumpr
        with:
          mode: bump
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          major-label: major
          minor-label: minor
          patch-label: patch
          noop-labels: no-version-update
          require-release-notes: true
          release-notes-prefix: ''
          release-notes-suffix: ''
          with-v: false
          base-branch: false

      - name: Check if version was bumped
        id: version_check
        run: |
          VERSION="${{ steps.bumpr.outputs.version }}"
          echo "Version output: '$VERSION'"
          
          # Check if version is empty, null, or just whitespace
          if [ -z "$VERSION" ] || [ "$VERSION" = "null" ] || [ "$VERSION" = "" ]; then
            echo "No version bump detected - skipping release"
            echo "should_release=false" >> $GITHUB_OUTPUT
            echo "version_bumped=false" >> $GITHUB_OUTPUT
          else
            # Validate version format (should be like 1.2.3)
            if [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              echo "Valid version detected: $VERSION"
              echo "should_release=true" >> $GITHUB_OUTPUT
              echo "version_bumped=true" >> $GITHUB_OUTPUT
              echo "APP_VERSION=$VERSION" >> $GITHUB_ENV
            else
              echo "Invalid version format: $VERSION - skipping release"
              echo "should_release=false" >> $GITHUB_OUTPUT
              echo "version_bumped=false" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Show version in Summary
        if: steps.version_check.outputs.should_release == 'true'
        run: |
          echo "### Application Version:" " ${{ env.APP_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: Show no-release message in Summary
        if: steps.version_check.outputs.should_release == 'false'
        run: |
          echo "### No Release Created" >> $GITHUB_STEP_SUMMARY
          echo "This merge did not include a version bump label (patch, minor, major)." >> $GITHUB_STEP_SUMMARY
          echo "Use one of these labels on your PR to trigger a release:" >> $GITHUB_STEP_SUMMARY
          echo "- **patch**: for bug fixes and minor changes" >> $GITHUB_STEP_SUMMARY
          echo "- **minor**: for new features (backward compatible)" >> $GITHUB_STEP_SUMMARY
          echo "- **major**: for breaking changes" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

    outputs:
      APP_VERSION: ${{ env.APP_VERSION }}
      SHOULD_RELEASE: ${{ steps.version_check.outputs.should_release }}
      VERSION_BUMPED: ${{ steps.version_check.outputs.version_bumped }}

  release:
    name: Create Release Assets
    runs-on: ubuntu-latest
    needs: [bump_tag_version, build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.bump_tag_version.outputs.SHOULD_RELEASE == 'true'
    timeout-minutes: 15
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up GitHub CLI
        run: |
          type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
          && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
          && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
          && sudo apt update \
          && sudo apt install gh -y

      - name: Authenticate with GitHub
        run: echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: List available artifacts
        run: |
          echo "Available artifacts from previous jobs:"
          gh run list --limit 5 --json status,conclusion,headBranch,headSha,name,number,workflowName
          echo "Current run ID: ${{ github.run_id }}"

      - name: Check build job status
        run: |
          echo "Checking if build job completed successfully..."
          # The build job should have completed since this job depends on it
          echo "Build job dependency satisfied"

      - name: Download ingestor artifacts
        uses: actions/download-artifact@v5
        timeout-minutes: 5
        with:
          name: ingestor-binaries
          path: ingestor-binaries

      - name: Download logger artifacts
        uses: actions/download-artifact@v5
        timeout-minutes: 5
        with:
          name: logger-binaries
          path: logger-binaries

      - name: Download tracker artifacts
        uses: actions/download-artifact@v5
        timeout-minutes: 5
        with:
          name: tracker-binaries
          path: tracker-binaries



      - name: Verify artifacts downloaded
        run: |
          echo "Verifying all artifacts were downloaded successfully..."
          for binary in ingestor logger tracker; do
            if [ ! -d "${binary}-binaries" ]; then
              echo "❌ Error: ${binary}-binaries directory not found"
              exit 1
            fi
            echo "✅ Found ${binary}-binaries directory"
            echo "Contents:"
            ls -la "${binary}-binaries/"
          done
          echo "✅ All artifacts downloaded successfully"

      - name: Create release and upload assets
        run: |
          VERSION="${{ needs.bump_tag_version.outputs.APP_VERSION }}"
          TAG="v$VERSION"
          
          echo "Creating release for version: $VERSION"
          echo "Tag: $TAG"
          
          # Validate version one more time
          if [ -z "$VERSION" ] || [ "$VERSION" = "null" ]; then
            echo "Error: Invalid version '$VERSION' - aborting release"
            exit 1
          fi
          
          # Debug: List downloaded artifacts
          echo "Checking downloaded artifacts..."
          ls -la
          for binary in ingestor logger tracker; do
            if [ -d "${binary}-binaries" ]; then
              echo "Found ${binary}-binaries directory:"
              ls -la "${binary}-binaries/"
            else
              echo "Warning: ${binary}-binaries directory not found"
            fi
          done
          
          # Create release assets directory
          mkdir -p release-assets
          
          # Package binaries with validation
          for binary in ingestor logger tracker; do
            if [ -d "${binary}-binaries" ]; then
              echo "Packaging ${binary} binaries..."
              tar -czf "release-assets/${binary}-${VERSION}-binaries.tar.gz" -C "${binary}-binaries" .
              echo "Created: release-assets/${binary}-${VERSION}-binaries.tar.gz"
            else
              echo "Error: ${binary}-binaries directory not found - cannot create release asset"
              exit 1
            fi
          done
          
          # Create enhanced release notes
          cat > release_notes.md << EOF
          ## Release $TAG
          
          ### 🚀 What's New
          - Automated release with semantic versioning
          - Enhanced SBS message processing
          - Improved aircraft state tracking
          
          ### 🔧 Improvements
          - Updated dependencies
          - Performance optimizations
          
          ### 📦 Binaries
          This release includes binaries for:
          - Linux (AMD64, ARM64)
          - macOS (AMD64)
          
          ### 🐳 Docker Images
          Docker images are available on GitHub Container Registry:
          - sbs-ingestor:$TAG
          - sbs-logger:$TAG
          - sbs-tracker:$TAG
          EOF
          
          # Create the release with proper notes (if it doesn't exist)
          if ! gh release view $TAG >/dev/null 2>&1; then
            echo "Creating release $TAG..."
            gh release create $TAG --title "Release $TAG" --notes-file release_notes.md
          else
            echo "Release $TAG already exists, updating description..."
            gh release edit $TAG --notes-file release_notes.md
          fi
          
          # Upload assets to the release
          gh release upload $TAG release-assets/*.tar.gz --clobber 